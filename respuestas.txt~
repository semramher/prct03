18. Escriba el programa que muestra por la consola la frase "Hola Mundo". ¿Qué significado tiene la salida? (puts ’Hola Mundo’)
Este programa imprime por pantalla Hola Mundo y devuelve nil.

21. ¿Qué diferencia hay entre "\t\n" y ’\t\n’?
Con doble comillas imprime un tabulador y un retorno de carro (interpola), y con comillas simples lo imprime literal.

22. ¿Cómo funciona %q? ¿Qué es %q{hello world\n}? ¿Qué es %q{’a’ ’b’ ’c’}?
Funciona como las comillas simples, imprime literal lo que hay entre las llaves. El primero imprime hello world\n, y el segundo ’a’ ’b’ ’c’.

23. ¿Cómo funciona %Q? ¿Qué es %Q{hello world\n}? ¿Qué es %Q{"a" "b" "c"}?
En mayúscula funciona como comillas dobles, es decir interpola. Por lo tanto, imprime hello world y un retorno de carro. En el otro caso imprime "a" "b" "c".

24. ¿Qué queda en c?
En c queda: --4--\n--2--\n. Si se hace un puts imprime:
--4--
--2--

25. ¿Qué queda en c?
En c queda: --\#{a}--\n--\#{b}--\n. Si se hace un puts imprime:
--\#{a}--
--\#{b}--

26. s = "hello". ¿Cuál es el valor de las siguientes expresiones?
s[0,2] => he
s[-1,1] => o
s[0,10] => hello

27. ¿Qué queda en g?
hello world

28. ¿Qué queda en e?
... (tres puntos)

29. ¿Cuál es el resultado?
2 2 2 

30. ¿Qué es esto? %w[this is a test]
Es una lista, mete en una lista todos los elementos entre [] separados por espacios. Con el puts, devuelve:
this
is
a
test

31. ¿Qué es esto? %w[\t \n]
\t
\n

32. ¿Qué es esto? %W[\t \n]



33. ¿Qué contiene nils? nils = Array.new(3)
Contiene 3 nulos: [nil, nil, nil]

34. ¿Qué contiene zeros? zeros = Array.new(3, 0)
Un array con tres ceros: [0, 0, 0].

35. ¿Qué queda en b?
Un array de 2 elementos que son arrays.

36. ¿Qué queda en c?
[0, 2, 4]. Un array con tres elementos.

37. ¿Cuál es el resultado de cada una de estas operaciones?
a[1,1] => b
a[-2,2] => d e
a[0..2] => a b c
a[0...1] => a
a[-2..-1] => d e

38. ¿Cuál es el resultado de cada una de estas operaciones?
a[0,2] = %w{A B}
	a => A B c d e
a[2..5] = %w{C D E}
	a => A B C D E
a[0,0] = [1,2,3]
	a => 1 2 3 A B C D E
a[0,2] = []
	a => 3 A B C D E
a[-1,1] = [ ’Z’ ]
	a => 3 A B C D Z
a[-2,2] = nil
	a => 3 A B C D 

39. ¿Cuál es el resultado de cada una de estas operaciones?
a = (1...4).to_a
	=> 1 2 3 4
a = a + [4, 5]
	=> 1 2 3 4 4 5
a += [[6, 7, 8]]
	=> 1 2 3 4 4 5 6 7 8
a = a + 9
	=> TypeError: can't convert Fixnum into Array
		from (irb):94:in `+'
		from (irb):94
		from /usr/bin/irb:12:in `<main>'

40. ¿Cuál es el resultado de cada una de estas operaciones?
>> x = %w{a b c b a}
	=> a b c b a
>> x = x - %w{b c d}
	=> a a

41. ¿Cuál es el resultado de cada una de estas operaciones?
>> z = [0]*8
	=> 0 0 0 0 0 0 0 0

42. ¿Cuál es el resultado de cada una de estas operaciones?
a << 1
	=> 1
a << 2 << 3
	=> 1 2 3
a << [4, 5, 6]
	=> 1 2 3 4 5 6
a.concat [7, 8]
	=> 1 2 3 4 5 6 7 8

43. ¿Cuál es el resultado de cada una de estas operaciones?
c = a | b
	=> 1 2 3 4 5
d = b | a
	=> 5 4 3 2 1
e = a & b
	=> 2 3 4
f = b & a
	=> 4 3 2

44. ¿Qué resultados dan las siguientes operaciones?
a.to_a
	=> 1 2 3 4 5 6 7 8 9 10
b.to_a
	=> 1 2 3 4 5 6 7 8 9
b.include? 10
	=> false
b.include? 8
	=> true
b.step(2) {|x| print "#{x} " }
	=> 1 3 5 7 9
1..3.to_a
	=> NoMethodError: undefined method `to_a' for 3:Fixnum
		from (irb):126
		from /usr/bin/irb:12:in `<main>'

45. ¿Qué resultados dan las siguientes operaciones?
r.member? 50
	=> true
r.include? 99.9
	=> true
r.member? 99.9
	=> true

46. ¿Qué resultados dan las siguientes operaciones?
true.class
	=> TrueClass
false.class
	=> FalseClass
puts "hello" if 0
	=> hello
puts "hello" if nil
	=> nil
puts "hello" if ""
	(irb):137: warning: string literal in condition
	hello
	=> nil

47. ¿Qué resultados dan las siguientes operaciones?
x.class
	=> Symbol
x == ’sym’
	=> false
x == :sym
	=> true
z.class
	=> 
x == ’sym’.to_sym
	=> 
x.to_s == ’sym’
	=> 

48. ¿Qué resultados se dan?
print s
	=> 
print s, t
	=> 

49. ¿Cuál es el resultado?
"%d %s" % [3, "rubies"]
	=> 

50. ¿Cuáles son los resultados?
x, y = 4, 5
	=> 
z = x > y ? x : y
	=> 
x,y,z = [1,2,3]
	=> 

51. ¿Qué resultados dan las siguientes operaciones?
x.keys
	=> 
x.values
	=> 
x[:c] = 3
x
	=> 
x.delete(’a’)
x
	=> 
x.delete(:a)
x
	=> 
x.delete_if { |k,v| v % 2 == 0 }
	=> 
x
	=> 

52. ¿Qué hace yield 4, 5?

53. ¿Qué hace la siguiente sentencia? counts = Hash.new(0) ¿Qué diferencia hay con la asignación counts = {}?

54. ¿Qué retorna esta expresión? ’hello world, hello LPP’.scan /\w+/

55. Explique que hacen estas sentencias:
c = { :a => 3, :b => 2, :c => 1 }
	=> 
c.keys.sort.each { |k| puts c[k] }
	=> 




